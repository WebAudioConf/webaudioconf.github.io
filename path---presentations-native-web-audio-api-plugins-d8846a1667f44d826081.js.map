{"version":3,"sources":["webpack:///path---presentations-native-web-audio-api-plugins-d8846a1667f44d826081.js","webpack:///./.cache/json/presentations-native-web-audio-api-plugins.json"],"names":["webpackJsonp","479","module","exports","pathContext","abstract","authors","name","slug","title","type"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,SAAA,k+BAAAC,UAAy/BC,KAAA,kBAAyBA,KAAA,kBAAuBC,KAAA,+BAAAC,MAAA,+BAAAC,KAAA","file":"path---presentations-native-web-audio-api-plugins-d8846a1667f44d826081.js","sourcesContent":["webpackJsonp([8061785434101],{\n\n/***/ 479:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"abstract\":\"This work enables native audio plugin development using the Web Audio API and other web technologies. Hybrid forms where DSP algorithms are implemented in both JavaScript and native C++, and distributed forms where web technologies are used only for the user interface, are also supported. Various implementation options are explored, and the most promising option is implemented and evaluated. We found that the solution is able to operate at 128 sample buffer sizes, and that the performance of the Web Audio API audio graph is not compromised. The proof of-concept solution also maintains compatibility with existing Web Audio API implementations. The average MIDI latency was 24 ms, which is high when comparing with fully native plugin solutions. Backwards compatibility also reduces usability when working with multiple plugin instances. We conclude that the second iteration needs to break backwards compatibility in order to overcome the MIDI latency and multi-plugin support issues.\",\"authors\":[{\"name\":\"Jari Kleimola\"},{\"name\":\"Owen Campbell\"}],\"slug\":\"native-web-audio-api-plugins\",\"title\":\"Native Web Audio API Plugins\",\"type\":\"paper\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---presentations-native-web-audio-api-plugins-d8846a1667f44d826081.js","module.exports = {\"pathContext\":{\"abstract\":\"This work enables native audio plugin development using the Web Audio API and other web technologies. Hybrid forms where DSP algorithms are implemented in both JavaScript and native C++, and distributed forms where web technologies are used only for the user interface, are also supported. Various implementation options are explored, and the most promising option is implemented and evaluated. We found that the solution is able to operate at 128 sample buffer sizes, and that the performance of the Web Audio API audio graph is not compromised. The proof of-concept solution also maintains compatibility with existing Web Audio API implementations. The average MIDI latency was 24 ms, which is high when comparing with fully native plugin solutions. Backwards compatibility also reduces usability when working with multiple plugin instances. We conclude that the second iteration needs to break backwards compatibility in order to overcome the MIDI latency and multi-plugin support issues.\",\"authors\":[{\"name\":\"Jari Kleimola\"},{\"name\":\"Owen Campbell\"}],\"slug\":\"native-web-audio-api-plugins\",\"title\":\"Native Web Audio API Plugins\",\"type\":\"paper\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/presentations-native-web-audio-api-plugins.json\n// module id = 479\n// module chunks = 8061785434101"],"sourceRoot":""}