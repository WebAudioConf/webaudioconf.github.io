{"version":3,"sources":["webpack:///path---demos-and-posters-pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology-ce7a4e3c6d98a5dd38cd.js","webpack:///./.cache/json/demos-and-posters-pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology.json"],"names":["webpackJsonp","446","module","exports","pathContext","abstract","authors","name","slug","title","type"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,SAAA,g9CAAAC,UAAu+CC,KAAA,kBAAyBA,KAAA,iBAAsBC,KAAA,kIAAAC,MAAA,mIAAAC,KAAA","file":"path---demos-and-posters-pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology-ce7a4e3c6d98a5dd38cd.js","sourcesContent":["webpackJsonp([62095212500128],{\n\n/***/ 446:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"abstract\":\"Lately, a number of audio players based on web technology have made it possible for researchers to present their audio-related work in an attractive manner. Tools such as *wavesurfer.js*, *waveform-playlist* and *trackswitch.js* provide highly-configurable players, allowing a more interactive exploration of scientific results that goes beyond simple linear playback.\\n\\nHowever, the audio output to be presented is in many cases not generated by the same web technologies. The process of preparing audio data for display therefore requires manual intervention, in order to bridge the resulting gap between programming languages. While this is acceptable for one-time events, such as the preparation of final results, it prevents the usage of such players during the iterative development cycle. Having access to rich audio players already during development would allow researchers to get more instantaneous feedback. The current workflow consists of repeatedly importing audio into a digital audio workstation in order to achieve similar capabilities, a repetitive and time-consuming process.\\n\\nIn order to address these needs, we present *pywebaudioplayer*, a Python package that automates the generation of code snippets for the each of the three aforementioned web audio players. It is aimed at use-cases where audio development in Python is combined with web visualisation. Notable examples are *Jupyter Notebook* and WSGI-compatible web frameworks such as *Flask* or *Django*.\",\"authors\":[{\"name\":\"Johan Pauwels\"},{\"name\":\"Mark Sandler\"}],\"slug\":\"pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology\",\"title\":\"pywebaudioplayer: Bridging the gap between audio processing code in Python and attractive visualisations based on web technology\",\"type\":\"poster\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---demos-and-posters-pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology-ce7a4e3c6d98a5dd38cd.js","module.exports = {\"pathContext\":{\"abstract\":\"Lately, a number of audio players based on web technology have made it possible for researchers to present their audio-related work in an attractive manner. Tools such as *wavesurfer.js*, *waveform-playlist* and *trackswitch.js* provide highly-configurable players, allowing a more interactive exploration of scientific results that goes beyond simple linear playback.\\n\\nHowever, the audio output to be presented is in many cases not generated by the same web technologies. The process of preparing audio data for display therefore requires manual intervention, in order to bridge the resulting gap between programming languages. While this is acceptable for one-time events, such as the preparation of final results, it prevents the usage of such players during the iterative development cycle. Having access to rich audio players already during development would allow researchers to get more instantaneous feedback. The current workflow consists of repeatedly importing audio into a digital audio workstation in order to achieve similar capabilities, a repetitive and time-consuming process.\\n\\nIn order to address these needs, we present *pywebaudioplayer*, a Python package that automates the generation of code snippets for the each of the three aforementioned web audio players. It is aimed at use-cases where audio development in Python is combined with web visualisation. Notable examples are *Jupyter Notebook* and WSGI-compatible web frameworks such as *Flask* or *Django*.\",\"authors\":[{\"name\":\"Johan Pauwels\"},{\"name\":\"Mark Sandler\"}],\"slug\":\"pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology\",\"title\":\"pywebaudioplayer: Bridging the gap between audio processing code in Python and attractive visualisations based on web technology\",\"type\":\"poster\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/demos-and-posters-pywebaudioplayer-bridging-the-gap-between-audio-processing-code-in-python-and-attractive-visualisations-based-on-web-technology.json\n// module id = 446\n// module chunks = 62095212500128"],"sourceRoot":""}